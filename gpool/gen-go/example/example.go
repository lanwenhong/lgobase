// Code generated by Thrift Compiler (0.18.0). DO NOT EDIT.

package example

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Respcd
//  - Resperr
//  - ExtJSON
type ExampleError struct {
  Respcd int32 `thrift:"respcd,1" db:"respcd" json:"respcd"`
  Resperr string `thrift:"resperr,2" db:"resperr" json:"resperr"`
  ExtJSON *string `thrift:"ext_json,3" db:"ext_json" json:"ext_json,omitempty"`
}

func NewExampleError() *ExampleError {
  return &ExampleError{}
}


func (p *ExampleError) GetRespcd() int32 {
  return p.Respcd
}

func (p *ExampleError) GetResperr() string {
  return p.Resperr
}
var ExampleError_ExtJSON_DEFAULT string
func (p *ExampleError) GetExtJSON() string {
  if !p.IsSetExtJSON() {
    return ExampleError_ExtJSON_DEFAULT
  }
return *p.ExtJSON
}
func (p *ExampleError) IsSetExtJSON() bool {
  return p.ExtJSON != nil
}

func (p *ExampleError) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExampleError)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Respcd = v
}
  return nil
}

func (p *ExampleError)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resperr = v
}
  return nil
}

func (p *ExampleError)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExtJSON = &v
}
  return nil
}

func (p *ExampleError) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ExampleError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleError) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "respcd", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:respcd: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Respcd)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.respcd (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:respcd: ", p), err) }
  return err
}

func (p *ExampleError) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "resperr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resperr: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Resperr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.resperr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resperr: ", p), err) }
  return err
}

func (p *ExampleError) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtJSON() {
    if err := oprot.WriteFieldBegin(ctx, "ext_json", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ext_json: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ExtJSON)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ext_json (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ext_json: ", p), err) }
  }
  return err
}

func (p *ExampleError) Equals(other *ExampleError) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Respcd != other.Respcd { return false }
  if p.Resperr != other.Resperr { return false }
  if p.ExtJSON != other.ExtJSON {
    if p.ExtJSON == nil || other.ExtJSON == nil {
      return false
    }
    if (*p.ExtJSON) != (*other.ExtJSON) { return false }
  }
  return true
}

func (p *ExampleError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleError(%+v)", *p)
}

func (p *ExampleError) Error() string {
  return p.String()
}

func (ExampleError) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*ExampleError)(nil)

func (p *ExampleError) Validate() error {
  return nil
}
// Attributes:
//  - Ret
type Myret struct {
  Ret string `thrift:"ret,1" db:"ret" json:"ret"`
}

func NewMyret() *Myret {
  return &Myret{}
}


func (p *Myret) GetRet() string {
  return p.Ret
}
func (p *Myret) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Myret)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Ret = v
}
  return nil
}

func (p *Myret) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Myret"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Myret) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ret", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ret: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Ret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ret (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ret: ", p), err) }
  return err
}

func (p *Myret) Equals(other *Myret) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ret != other.Ret { return false }
  return true
}

func (p *Myret) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Myret(%+v)", *p)
}

func (p *Myret) Validate() error {
  return nil
}
type Example interface {
  // Parameters:
  //  - A
  //  - B
  Add(ctx context.Context, a int32, b int32) (_r int32, _err error)
  // Parameters:
  //  - Req
  Echo(ctx context.Context, req string) (_r *Myret, _err error)
}

type ExampleClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewExampleClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ExampleClient {
  return &ExampleClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewExampleClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ExampleClient {
  return &ExampleClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewExampleClient(c thrift.TClient) *ExampleClient {
  return &ExampleClient{
    c: c,
  }
}

func (p *ExampleClient) Client_() thrift.TClient {
  return p.c
}

func (p *ExampleClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *ExampleClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - A
//  - B
func (p *ExampleClient) Add(ctx context.Context, a int32, b int32) (_r int32, _err error) {
  var _args0 ExampleAddArgs
  _args0.A = a
  _args0.B = b
  var _result2 ExampleAddResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "add", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *ExampleClient) Echo(ctx context.Context, req string) (_r *Myret, _err error) {
  var _args3 ExampleEchoArgs
  _args3.Req = req
  var _result5 ExampleEchoResult
  var _meta4 thrift.ResponseMeta
  _meta4, _err = p.Client_().Call(ctx, "echo", &_args3, &_result5)
  p.SetLastResponseMeta_(_meta4)
  if _err != nil {
    return
  }
  switch {
  case _result5.E!= nil:
    return _r, _result5.E
  }

  if _ret6 := _result5.GetSuccess(); _ret6 != nil {
    return _ret6, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "echo failed: unknown result")
}

type ExampleProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Example
}

func (p *ExampleProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ExampleProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ExampleProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewExampleProcessor(handler Example) *ExampleProcessor {

  self7 := &ExampleProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self7.processorMap["add"] = &exampleProcessorAdd{handler:handler}
  self7.processorMap["echo"] = &exampleProcessorEcho{handler:handler}
return self7
}

func (p *ExampleProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x8.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x8

}

type exampleProcessorAdd struct {
  handler Example
}

func (p *exampleProcessorAdd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err9 error
  args := ExampleAddArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "add", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ExampleAddResult{}
  if retval, err2 := p.handler.Add(ctx, args.A, args.B); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc10 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing add: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "add", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err9 = thrift.WrapTException(err2)
    }
    if err2 := _exc10.Write(ctx, oprot); _write_err9 == nil && err2 != nil {
      _write_err9 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err9 == nil && err2 != nil {
      _write_err9 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err9 == nil && err2 != nil {
      _write_err9 = thrift.WrapTException(err2)
    }
    if _write_err9 != nil {
      return false, thrift.WrapTException(_write_err9)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "add", thrift.REPLY, seqId); err2 != nil {
    _write_err9 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err9 == nil && err2 != nil {
    _write_err9 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err9 == nil && err2 != nil {
    _write_err9 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err9 == nil && err2 != nil {
    _write_err9 = thrift.WrapTException(err2)
  }
  if _write_err9 != nil {
    return false, thrift.WrapTException(_write_err9)
  }
  return true, err
}

type exampleProcessorEcho struct {
  handler Example
}

func (p *exampleProcessorEcho) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err11 error
  args := ExampleEchoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "echo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := ExampleEchoResult{}
  if retval, err2 := p.handler.Echo(ctx, args.Req); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *ExampleError:
      result.E = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc12 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echo: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "echo", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err11 = thrift.WrapTException(err2)
      }
      if err2 := _exc12.Write(ctx, oprot); _write_err11 == nil && err2 != nil {
        _write_err11 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err11 == nil && err2 != nil {
        _write_err11 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err11 == nil && err2 != nil {
        _write_err11 = thrift.WrapTException(err2)
      }
      if _write_err11 != nil {
        return false, thrift.WrapTException(_write_err11)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "echo", thrift.REPLY, seqId); err2 != nil {
    _write_err11 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err11 == nil && err2 != nil {
    _write_err11 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err11 == nil && err2 != nil {
    _write_err11 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err11 == nil && err2 != nil {
    _write_err11 = thrift.WrapTException(err2)
  }
  if _write_err11 != nil {
    return false, thrift.WrapTException(_write_err11)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - A
//  - B
type ExampleAddArgs struct {
  A int32 `thrift:"a,1" db:"a" json:"a"`
  B int32 `thrift:"b,2" db:"b" json:"b"`
}

func NewExampleAddArgs() *ExampleAddArgs {
  return &ExampleAddArgs{}
}


func (p *ExampleAddArgs) GetA() int32 {
  return p.A
}

func (p *ExampleAddArgs) GetB() int32 {
  return p.B
}
func (p *ExampleAddArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExampleAddArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.A = v
}
  return nil
}

func (p *ExampleAddArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.B = v
}
  return nil
}

func (p *ExampleAddArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleAddArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "a", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.A)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a: ", p), err) }
  return err
}

func (p *ExampleAddArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "b", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:b: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.B)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.b (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:b: ", p), err) }
  return err
}

func (p *ExampleAddArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleAddArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ExampleAddResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewExampleAddResult() *ExampleAddResult {
  return &ExampleAddResult{}
}

var ExampleAddResult_Success_DEFAULT int32
func (p *ExampleAddResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ExampleAddResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ExampleAddResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ExampleAddResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExampleAddResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ExampleAddResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "add_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleAddResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ExampleAddResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleAddResult(%+v)", *p)
}

// Attributes:
//  - Req
type ExampleEchoArgs struct {
  Req string `thrift:"req,1" db:"req" json:"req"`
}

func NewExampleEchoArgs() *ExampleEchoArgs {
  return &ExampleEchoArgs{}
}


func (p *ExampleEchoArgs) GetReq() string {
  return p.Req
}
func (p *ExampleEchoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExampleEchoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Req = v
}
  return nil
}

func (p *ExampleEchoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "echo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleEchoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Req)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *ExampleEchoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleEchoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type ExampleEchoResult struct {
  Success *Myret `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ExampleError `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewExampleEchoResult() *ExampleEchoResult {
  return &ExampleEchoResult{}
}

var ExampleEchoResult_Success_DEFAULT *Myret
func (p *ExampleEchoResult) GetSuccess() *Myret {
  if !p.IsSetSuccess() {
    return ExampleEchoResult_Success_DEFAULT
  }
return p.Success
}
var ExampleEchoResult_E_DEFAULT *ExampleError
func (p *ExampleEchoResult) GetE() *ExampleError {
  if !p.IsSetE() {
    return ExampleEchoResult_E_DEFAULT
  }
return p.E
}
func (p *ExampleEchoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ExampleEchoResult) IsSetE() bool {
  return p.E != nil
}

func (p *ExampleEchoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExampleEchoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Myret{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ExampleEchoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &ExampleError{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *ExampleEchoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "echo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExampleEchoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ExampleEchoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *ExampleEchoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExampleEchoResult(%+v)", *p)
}


